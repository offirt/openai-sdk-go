package openai

const ChatEndpointPath = "/chat/completions/"

// Completions Endpoint
//
//		Given a prompt, the model will return one or more predicted completions,
//	 and can also return the probabilities of alternative tokens at each position.
type ChatEndpoint struct {
	*endpoint
}

// Completions Endpoint
func (c *Client) Chat() *ChatEndpoint {
	return &ChatEndpoint{newEndpoint(c, ChatEndpointPath)}
}

type ChatCompletionRequest struct {
	// ID of the model to use. See the [model endpoint compatibility]: https://platform.openai.com/docs/models/model-endpoint-compatibility table for details on which models work with the Chat API.
	Model string `json:"model" binding:"required"`
	// A list of messages describing the conversation so far.
	Messages []string `json:"messages" binding:"required"`
	// The role of the author of this message. One of system, user, or assistant.
	Role string `json:"role" binding:"required"`
	// The contents of the message.
	Content string `json:"content" binding:"required"`
	// The name of the author of this message. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
	Name string `json:"name,omitempty"`
	// Defaults to 1
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	// We generally recommend altering this or top_p but not both.
	Temperature int `json:"temperature,omitempty"`
	// Defaults to 1
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	// We generally recommend altering this or temperature but not both.
	TopP int `json:"top_p,omitempty"`
	// Defaults to 1
	// How many chat completion choices to generate for each input message.
	N int `json:"n,omitempty"`
	// Defaults to false
	// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. See the OpenAI Cookbook for example code.
	Stream bool `json:"stream,omitempty"`
	// Defaults to null
	// Up to 4 sequences where the API will stop generating further tokens.
	Stop []string `json:"stop,omitempty"`
	// Defaults to inf
	// The maximum number of tokens to generate in the chat completion.
	// The total length of input tokens and generated tokens is limited by the model's context length.
	MaxTokens int `json:"max_tokens,omitempty"`
	// Defaults to 0
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	// See more information about frequency and presence penalties.
	PresencePenalty int `json:"presence_penalty,omitempty"`
	// Defaults to 0
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	// See more information about frequency and presence penalties.
	FrequencyPenalty int `json:"frequency_penalty,omitempty"`
	// Defaults to null
	// Modify the likelihood of specified tokens appearing in the completion.
	// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	LogitBias map[string]string `json:"logit_bias,omitempty"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more.
	User string `json:"user,omitempty"`
}

type ChatCompletionResponse struct {
	Id      string `json:"id"`
	Object  string `json:"object"`
	Created int    `json:"created"`
	Model   string `json:"model"`
	Choices []struct {
		Text         string `json:"text"`
		Index        int    `json:"index"`
		LogProbs     int    `json:"logprobs,omitempty"`
		FinishReason string `json:"finish_reason"`
	} `json:"choices"`
	Usage struct {
		PromptTokens     int `json:"prompt_tokens"`
		CompletionTokens int `json:"completion_tokens"`
		TotalTokens      int `json:"total_tokens"`
	} `json:"usage"`
}

// Creates a model response for the given chat conversation.
//
// [OpenAI Documentation]: https://platform.openai.com/docs/api-reference/chat/create
func (e *ChatEndpoint) CreateChatCompletion(req *ChatCompletionRequest) (*ChatCompletionResponse, error) {
	var resp ChatCompletionResponse
	err := e.do(e, "POST", "", req, &resp)
	return &resp, err
}
